generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String               @id @default(cuid())
  name          String?
  email         String?              @unique
  emailVerified DateTime?
  password      String?
  accounts      Account[]
  sessions      Session[]
  organizations UserOnOrganization[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Bussiness logic
model Organization {
  id String @id @default(uuid())

  books Book[]
  rooms Room[]

  name  String
  color String
  users UserOnOrganization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnOrganization {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, organizationId])
}

model Book {
  id String @id @default(uuid())

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  groups         Group[]
  item           Item[]

  name        String
  description String @default("")
  color       String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id String @id @default(uuid())

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  items          Item[]

  name        String
  description String @default("")
  color       String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id Int @id @default(autoincrement())

  book   Book   @relation(fields: [bookId], references: [id])
  bookId String
  items  Item[]

  name        String
  description String @default("")
  color       String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id Int @id @default(autoincrement())

  book   Book    @relation(fields: [bookId], references: [id])
  bookId String
  room   Room    @relation(fields: [roomId], references: [id])
  roomId String
  groups Group[]

  name        String
  description String @default("")
  color       String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
