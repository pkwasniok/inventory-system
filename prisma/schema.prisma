generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String               @id @default(cuid())
  name          String?              @db.VarChar(255)
  email         String?              @unique @db.VarChar(255)
  emailVerified DateTime?
  password      String?              @db.Text
  accounts      Account[]
  sessions      Session[]
  organizations UserOnOrganization[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Bussiness logic

model Organization {
  id String @id @default(uuid()) @db.Uuid

  users UserOnOrganization[]
  books Book[]

  name        String @db.VarChar(255)
  description String @db.Text
  color       String @db.VarChar(6)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnOrganization {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, organizationId])
}

model Book {
  id String @id @default(uuid()) @db.Uuid

  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String @db.Uuid

  name        String @db.VarChar(255)
  description String @db.Text
  color       String @db.VarChar(6)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id String @id @default(uuid()) @db.Uuid

  name        String @db.VarChar(255)
  description String @db.Text
  color       String @db.VarChar(6)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id String @id @default(uuid()) @db.Uuid

  name        String @db.VarChar(255)
  description String @db.Text
  color       String @db.VarChar(6)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id String @id @default(uuid()) @db.Uuid

  name        String @db.VarChar(255)
  description String @db.Text
  color       String @db.VarChar(6)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
